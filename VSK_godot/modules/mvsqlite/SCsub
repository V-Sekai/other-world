import os
import subprocess

Import("env")

env.Append(
    CPPDEFINES=[("SQLITE_ENABLE_RBU", 1), ("SQLITE_USE_URI", 1), "SQLITE_ENABLE_JSON1"],
)

env["builtin_zstd"] = False

env_thirdparty = env.Clone()
env_thirdparty.disable_warnings()

source_files = [
    "thirdparty/sqlite/*.c",
    "thirdparty/spmemvfs/*.c",
    "src/*.cpp",
    "*.cpp",
]

for source_file in source_files:
    env_thirdparty.add_source_files(env_thirdparty.modules_sources, source_file)

env.modules_sources += env_thirdparty.modules_sources

if env["platform"] == "windows":
    target = ""
    lib_path = ""
    target = "x86_64-pc-windows-gnu"
    env.Append(LIBS=[File("thirdparty/mvsqlite/target/x86_64-pc-windows-gnu/release/libmvsqlite.a")])

    env.Append(
        LIBPATH=["#modules/mvsqlite/thirdparty/mvsqlite/target/" + target + "/release"],
        LIBS=["ws2_32", "ntdll", "userenv"],
    )

    subprocess.check_output(["rustup", "target", "add", target], stderr=subprocess.STDOUT)

    os_env = os.environ.copy()
    os_env["CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER"] = "ld"

    subprocess.run(
        ["cargo", "build", "--release", "--target", target],
        cwd="thirdparty/mvsqlite/mvsqlite",
        env=os_env,
    )
else:
    env.Append(
        LIBPATH=["#modules/mvsqlite/thirdparty/mvsqlite/target/release"],
        CPPDEFINES=[
            ("SQLITE_ENABLE_RBU", 1),
            ("SQLITE_USE_URI", 1),
            "SQLITE_ENABLE_JSON1",
        ],
        LIBS=["mvsqlite"],
    )

    subprocess.run(["cargo", "build", "--release"], cwd="thirdparty/mvsqlite/mvsqlite")
